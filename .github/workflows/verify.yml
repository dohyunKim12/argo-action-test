name: Verify

on:
  pull_request:
    branches: [ "main" ]

  workflow_dispatch:
    inputs:
      application: 
        description: 'master-application/single-application 사용 여부'
        default: master
        type: choice
        options:
        - master
        - single
        required: true

jobs:
  verify:
    runs-on: ubuntu-latest
    env:
      APP_TYPE: ${{ github.event.inputs.application }}
      APPLICATION: ${{ github.event.inputs.application }}-applications
    steps:
      - uses: actions/checkout@master
      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.3.0
      - name: Install Argocd
        run: |
          kubectl create namespace argocd;
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml;
          kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "NodePort"}}';
      - name: Install Argocd cli
        env: 
          ARGOCD_CLI_VERSION: v2.5.2
        run: |
          curl -sL -o argocd https://github.com/argoproj/argo-cd/releases/download/$ARGOCD_CLI_VERSION/argocd-linux-amd64;
          chmod +x argocd;
          sudo mv argocd /usr/local/bin/argocd;

      - name: Login to Argocd 
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 10
          max_attempts: 10
          command: |
            PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d);
            NODEPORT=$(kubectl get svc -n argocd argocd-server -o jsonpath={.spec.ports[?\(@.port==80\)].nodePort});
            NODE_IP=$(kubectl get nodes -o jsonpath={.items[0].status.addresses[?\(@.type==\"InternalIP\"\)].address});
            argocd login $NODE_IP:$NODEPORT --insecure --username=admin --password=$PASSWORD;
  
      - name: Deploy $APP_TYPE application
        run: |
          kubectl apply -f application/app_of_apps/.;

      - name: Set essential params to $APP_TYPE application
        env:
          # 사용하고 있는 모듈 list를 명시 
          MODULE_LIST: | 
            calico gitlab gitea gatewayBootstrap strimziKafka serviceBinding hyperAuth argocd opensearch loki prometheus grafanaOperator
            serviceMesh.istio serviceMesh.jaeger serviceMesh.kiali capi capi.providers.aws capi.providers.vsphere tsb catalogController
            helmApiserver hyperCloud hyperregistry tektonPipeline tektonTrigger cicd redis imageValidatingWebhook nfs cephfs rbd efs
        run: 
          echo "Repository=https://github.com/$GITHUB_REPOSITORY";
          echo "Branch=$GITHUB_HEAD_REF"
          argocd app set $APPLICATION --repo=https://github.com/$GITHUB_REPOSITORY;
          argocd app set $APPLICATION --revision=$GITHUB_HEAD_REF;
          argocd app set $APPLICATION --parameter spec.source.repoURL=https://github.com/$GITHUB_REPOSITORY;
          argocd app set $APPLICATION --parameter spec.source.targetRevision=$GITHUB_HEAD_REF;
          for module in $MODULE_LIST;do argocd app set $APPLICATION --parameter modules.$module.enabled=true;done

      - name: Sync argocd $APP_TYPE application
        run: |
          argocd app sync $APPLICATION;
      
      - name: Sync argocd sub application
        continue-on-error: true
        id: subapp
        run: |
          MODULES=$(kubectl get app -n argocd -o jsonpath={.items[*].metadata.name});     
          for m in $MODULES
          do
            echo "module=$m" >> $GITHUB_OUTPUT; 
            echo "argocd sync checked: $m";
            argocd app sync $m --preview-changes <<<no > /dev/null;
          done
      - name: Check if application error exist
        run: |
          argocd app sync ${{ steps.subapp.outputs.module }} --preview-changes <<<no;
          echo "Checked argocd sub module error successfully";



        

        



